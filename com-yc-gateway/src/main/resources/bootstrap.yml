server:
  port: 8989
  env: test
spring:
  application:
    name: com-yc-gateway
  cloud:
    nacos:
      discovery:
        server-addr: 10.66.66.214:8848
        namespace: 5a1c2e28-229b-4378-a7a0-e8d95fffb54a
        group: test
      config:
        server-addr: ${spring.cloud.nacos.discovery.server-addr}
        namespace: ${spring.cloud.nacos.discovery.namespace}
        extension-configs:
          - data-id: ${spring.application.name}.yml
            group: ${server.env}
            refresh: true
          - data-id: global-config.xml
            group: ${server.env}
            refresh: true
    sentinel:
      transport:
        dashboard: 10.66.66.214:8858 # sentinel dashboard/console 地址
        port: 8719   #  sentinel会在该端口启动http server，那么这样的话，控制台定义的一些限流等规则才能发送传递过来，
        #如果8719端口被占用，那么会依次+1
      # Sentinel Nacos数据源配置，Nacos中的规则会自动同步到sentinel流控规则中
      datasource:
        # 自定义的流控规则数据源名称
        flow:
          nacos:
            server-addr: ${spring.cloud.nacos.discovery.server-addr}
            namespace: ${spring.cloud.nacos.discovery.namespace}
            data-id: ${spring.application.name}-flow-rules
            groupId: ${server.env}
            data-type: json
            rule-type: flow  # 类型来自RuleType类
        # 自定义的降级规则数据源名称
        degrade:
          nacos:
            server-addr: ${spring.cloud.nacos.discovery.server-addr}
            namespace: ${spring.cloud.nacos.discovery.namespace}
            data-id: ${spring.application.name}-degrade-rules
            groupId: ${server.env}
            data-type: json
            rule-type: degrade  # 类型来自RuleType类
#  main:
#    allow-bean-definition-overriding: true
#    zipkin:
#      base-url: http://127.0.0.1:9411 # zipkin server的请求地址
#      sender:
#        # web 客户端将踪迹日志数据通过网络请求的方式传送到服务端，另外还有配置
#        # kafka/rabbit 客户端将踪迹日志数据传递到mq进行中转
#        type: web
#      sleuth:
#        sampler:
#          # 采样率 1 代表100%全部采集 ，默认0.1 代表10% 的请求踪迹数据会被采集
#          # 生产环境下，请求量非常大，没有必要所有请求的踪迹数据都采集分析，对于网络包括server端压力都是比较大的，可以配置采样率采集一定比例的请求的踪迹数据进行分析即可
#          probability: 1
#management:
#  endpoints:
#    web:
#      exposure:
#        include: "*"
#  # 暴露健康接口的细节
#  endpoint:
#    health:
#      show-details: always
dubbo:
  cloud:
    subscribed-services: com-yc-user
  protocol:
    name: dubbo
    port: -1
  registry:
    address: nacos://10.66.66.214:8848
logging:
  level:
    org.springframework.web.servlet.DispatcherServlet: debug
#    org.springframework.cloud.sleuth: debug